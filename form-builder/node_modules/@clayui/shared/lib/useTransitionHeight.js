"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTransitionHeight = useTransitionHeight;

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * Removes the height style that triggers a transition when collapse
 * @param collapseElementRef
 */
function removeCollapseHeight(collapseElementRef) {
  if (collapseElementRef && collapseElementRef.current) {
    collapseElementRef.current.style.removeProperty('height');
  }
}
/**
 * Adds a height style that triggers a transition when collapsed
 * @param collapseElementRef
 */


function setCollapseHeight(collapseElementRef) {
  if (collapseElementRef && collapseElementRef.current) {
    // Cloned into a new array since `.reduce` is not a method on an HTMLCollection
    var height = Array.prototype.slice.call(collapseElementRef.current.children).reduce(function (acc, child) {
      return acc + child.clientHeight;
    }, 0);
    collapseElementRef.current.setAttribute('style', "height: ".concat(height, "px"));
  }
}

function useTransitionHeight(visible, setVisible, contentRef) {
  var _React$useState = _react.default.useState(false),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      transitioning = _React$useState2[0],
      setTransitioning = _React$useState2[1];

  _react.default.useEffect(function () {
    if (transitioning) {
      setCollapseHeight(contentRef);

      if (visible) {
        removeCollapseHeight(contentRef);
      }
    }
  }, [transitioning]);

  var handleTransitionEnd = function handleTransitionEnd(event) {
    if (event.target === contentRef.current && transitioning && !visible) {
      setVisible(true);
      setTransitioning(false);
      removeCollapseHeight(contentRef);
    } else if (event.target === contentRef.current) {
      setVisible(false);
      setTransitioning(false);
    }
  };

  var willTriggerTransition = function willTriggerTransition(event) {
    event.preventDefault();

    if (visible && !transitioning) {
      setCollapseHeight(contentRef);
    }

    if (!transitioning) {
      setTransitioning(true);
    }
  };

  return [transitioning, handleTransitionEnd, willTriggerTransition];
}