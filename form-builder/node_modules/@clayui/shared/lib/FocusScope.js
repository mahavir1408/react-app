"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FocusScope = void 0;

var _react = _interopRequireDefault(require("react"));

var _Keys = require("./Keys");

var _useFocusManagement = require("./useFocusManagement");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * FocusScope is a component only for controlling focus and listening
 * for children's key down events, since the component handles the `onKeyDown`
 * event.
 */
var FocusScope = function FocusScope(_ref) {
  var _ref$arrowKeysLeftRig = _ref.arrowKeysLeftRight,
      arrowKeysLeftRight = _ref$arrowKeysLeftRig === void 0 ? false : _ref$arrowKeysLeftRig,
      _ref$arrowKeysUpDown = _ref.arrowKeysUpDown,
      arrowKeysUpDown = _ref$arrowKeysUpDown === void 0 ? true : _ref$arrowKeysUpDown,
      children = _ref.children;

  var elRef = _react.default.useRef(null);

  var focusManager = (0, _useFocusManagement.useFocusManagement)(elRef);

  var _onKeyDown = function onKeyDown(event) {
    var key = event.key,
        shiftKey = event.shiftKey;

    if (arrowKeysUpDown && key === _Keys.Keys.Down || arrowKeysLeftRight && key === _Keys.Keys.Right || key === _Keys.Keys.Tab && !shiftKey) {
      if (focusManager.focusNext()) {
        event.preventDefault();
      }
    } else if (arrowKeysUpDown && key === _Keys.Keys.Up || arrowKeysLeftRight && key === _Keys.Keys.Left || key === _Keys.Keys.Tab && shiftKey) {
      if (focusManager.focusPrevious()) {
        event.preventDefault();
      }
    }
  };

  return /*#__PURE__*/_react.default.cloneElement(children, {
    onKeyDown: function onKeyDown(event) {
      _onKeyDown(event); // If the element already exists a `onKeyDown` event should
      // invoke it as well.


      if (children.props.onKeyDown) {
        children.props.onKeyDown(event);
      }
    },
    ref: function ref(r) {
      if (r) {
        elRef.current = r;
        var ref = children.ref;

        if (ref) {
          if (_typeof(ref) === 'object') {
            ref.current = r;
          }
        }
      }
    }
  });
};

exports.FocusScope = FocusScope;