"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Align", {
  enumerable: true,
  get: function get() {
    return _Menu.Align;
  }
});
exports.default = void 0;

var _shared = require("@clayui/shared");

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireDefault(require("react"));

var _Action = _interopRequireDefault(require("./Action"));

var _Caption = _interopRequireDefault(require("./Caption"));

var _Divider = _interopRequireDefault(require("./Divider"));

var _Group = _interopRequireDefault(require("./Group"));

var _Help = _interopRequireDefault(require("./Help"));

var _Item = _interopRequireDefault(require("./Item"));

var _ItemList = _interopRequireDefault(require("./ItemList"));

var _Menu = _interopRequireWildcard(require("./Menu"));

var _Search = _interopRequireDefault(require("./Search"));

var _Section = _interopRequireDefault(require("./Section"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var ClayDropDown = function ClayDropDown(_ref) {
  var _ref$active = _ref.active,
      active = _ref$active === void 0 ? false : _ref$active,
      alignmentPosition = _ref.alignmentPosition,
      children = _ref.children,
      className = _ref.className,
      _ref$containerElement = _ref.containerElement,
      ContainerElement = _ref$containerElement === void 0 ? 'div' : _ref$containerElement,
      hasLeftSymbols = _ref.hasLeftSymbols,
      hasRightSymbols = _ref.hasRightSymbols,
      menuElementAttrs = _ref.menuElementAttrs,
      offsetFn = _ref.offsetFn,
      onActiveChange = _ref.onActiveChange,
      trigger = _ref.trigger,
      otherProps = _objectWithoutProperties(_ref, ["active", "alignmentPosition", "children", "className", "containerElement", "hasLeftSymbols", "hasRightSymbols", "menuElementAttrs", "offsetFn", "onActiveChange", "trigger"]);

  var triggerElementRef = _react.default.useRef(null);

  var menuElementRef = _react.default.useRef(null);

  var handleKeyUp = function handleKeyUp(event) {
    if (event.key === _shared.Keys.Esc) {
      onActiveChange(!active);
    }
  };

  var handleFocus = function handleFocus(event) {
    if (menuElementRef.current && !menuElementRef.current.contains(event.target) && triggerElementRef.current && !triggerElementRef.current.contains(event.target)) {
      onActiveChange(false);
    }
  };

  _react.default.useEffect(function () {
    document.addEventListener('focus', handleFocus, true);
    return function () {
      document.removeEventListener('focus', handleFocus, true);
    };
  }, [handleFocus]);

  return /*#__PURE__*/_react.default.createElement(_shared.FocusScope, null, /*#__PURE__*/_react.default.createElement(ContainerElement, _extends({}, otherProps, {
    className: (0, _classnames.default)('dropdown', className),
    onKeyUp: handleKeyUp
  }), /*#__PURE__*/_react.default.cloneElement(trigger, {
    className: (0, _classnames.default)('dropdown-toggle', trigger.props.className),
    onClick: function onClick() {
      return onActiveChange(!active);
    },
    ref: function ref(node) {
      if (node) {
        triggerElementRef.current = node; // Call the original ref, if any.

        var ref = trigger.ref;

        if (typeof ref === 'function') {
          ref(node);
        }
      }
    }
  }), /*#__PURE__*/_react.default.createElement(_Menu.default, _extends({}, menuElementAttrs, {
    active: active,
    alignElementRef: triggerElementRef,
    alignmentPosition: alignmentPosition,
    hasLeftSymbols: hasLeftSymbols,
    hasRightSymbols: hasRightSymbols,
    offsetFn: offsetFn,
    onSetActive: onActiveChange,
    ref: menuElementRef
  }), children)));
};

ClayDropDown.Action = _Action.default;
ClayDropDown.Caption = _Caption.default;
ClayDropDown.Divider = _Divider.default;
ClayDropDown.Group = _Group.default;
ClayDropDown.Help = _Help.default;
ClayDropDown.Menu = _Menu.default;
ClayDropDown.Item = _Item.default;
ClayDropDown.ItemList = _ItemList.default;
ClayDropDown.Search = _Search.default;
ClayDropDown.Section = _Section.default;
var _default = ClayDropDown;
exports.default = _default;