import React from 'react';
export declare const Align: {
    readonly BottomCenter: 4;
    readonly BottomLeft: 5;
    readonly BottomRight: 3;
    readonly LeftBottom: 11;
    readonly LeftCenter: 6;
    readonly LeftTop: 10;
    readonly RightBottom: 9;
    readonly RightCenter: 2;
    readonly RightTop: 8;
    readonly TopCenter: 0;
    readonly TopLeft: 7;
    readonly TopRight: 1;
};
declare const ALIGN_MAP: {
    readonly BottomCenter: readonly ["tc", "bc"];
    readonly BottomLeft: readonly ["tl", "bl"];
    readonly BottomRight: readonly ["tr", "br"];
    readonly LeftBottom: readonly ["br", "bl"];
    readonly LeftCenter: readonly ["cr", "cl"];
    readonly LeftTop: readonly ["tr", "tl"];
    readonly RightBottom: readonly ["bl", "br"];
    readonly RightCenter: readonly ["cl", "cr"];
    readonly RightTop: readonly ["tl", "tr"];
    readonly TopCenter: readonly ["bc", "tc"];
    readonly TopLeft: readonly ["bl", "tl"];
    readonly TopRight: readonly ["br", "tr"];
};
declare type TPointOptions = typeof ALIGN_MAP[keyof typeof ALIGN_MAP];
interface IProps extends React.HTMLAttributes<HTMLDivElement> {
    active?: boolean;
    alignElementRef: React.RefObject<HTMLElement>;
    autoBestAlign?: boolean;
    alignmentPosition?: number | TPointOptions;
    hasLeftSymbols?: boolean;
    hasRightSymbols?: boolean;
    focusRefOnEsc?: React.RefObject<HTMLElement>;
    offsetFn?: (points: TPointOptions) => [number, number];
    onSetActive: (val: boolean) => void;
}
declare const ClayDropDownMenu: React.ForwardRefExoticComponent<IProps & React.RefAttributes<HTMLDivElement>>;
export default ClayDropDownMenu;
