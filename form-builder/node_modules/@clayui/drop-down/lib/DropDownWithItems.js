"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ClayDropDownWithItems = void 0;

var _form = require("@clayui/form");

var _react = _interopRequireDefault(require("react"));

var _warning = _interopRequireDefault(require("warning"));

var _Caption = _interopRequireDefault(require("./Caption"));

var _Divider = _interopRequireDefault(require("./Divider"));

var _DropDown = _interopRequireDefault(require("./DropDown"));

var _Group = _interopRequireDefault(require("./Group"));

var _Help = _interopRequireDefault(require("./Help"));

var _Search = _interopRequireDefault(require("./Search"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Checkbox = function Checkbox(_ref) {
  var _ref$checked = _ref.checked,
      checked = _ref$checked === void 0 ? false : _ref$checked,
      _ref$onChange = _ref.onChange,
      _onChange = _ref$onChange === void 0 ? function () {} : _ref$onChange,
      otherProps = _objectWithoutProperties(_ref, ["checked", "onChange"]);

  var _React$useState = _react.default.useState(checked),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      value = _React$useState2[0],
      setValue = _React$useState2[1];

  return /*#__PURE__*/_react.default.createElement(_DropDown.default.Section, null, /*#__PURE__*/_react.default.createElement(_form.ClayCheckbox, _extends({}, otherProps, {
    checked: value,
    onChange: function onChange() {
      setValue(function (val) {
        return !val;
      });

      _onChange(!value);
    }
  })));
};

var ClayDropDownContext = _react.default.createContext({
  close: function close() {}
});

var Item = function Item(_ref2) {
  var label = _ref2.label,
      _onClick = _ref2.onClick,
      props = _objectWithoutProperties(_ref2, ["label", "onClick"]);

  var _React$useContext = _react.default.useContext(ClayDropDownContext),
      close = _React$useContext.close;

  return /*#__PURE__*/_react.default.createElement(_DropDown.default.Item, _extends({
    onClick: function onClick(e) {
      if (_onClick) {
        _onClick(e);
      }

      close();
    }
  }, props), label);
};

var Group = function Group(_ref3) {
  var items = _ref3.items,
      label = _ref3.label,
      spritemap = _ref3.spritemap;
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_Group.default, {
    header: label
  }), items && /*#__PURE__*/_react.default.createElement(DropDownContent, {
    items: items,
    spritemap: spritemap
  }));
};

var RadioGroupContext = _react.default.createContext({});

var Radio = function Radio(_ref4) {
  var _ref4$value = _ref4.value,
      value = _ref4$value === void 0 ? '' : _ref4$value,
      otherProps = _objectWithoutProperties(_ref4, ["value"]);

  var _React$useContext2 = _react.default.useContext(RadioGroupContext),
      checked = _React$useContext2.checked,
      name = _React$useContext2.name,
      _onChange2 = _React$useContext2.onChange;

  return /*#__PURE__*/_react.default.createElement(_DropDown.default.Section, null, /*#__PURE__*/_react.default.createElement(_form.ClayRadio, _extends({}, otherProps, {
    checked: checked === value,
    inline: true,
    name: name,
    onChange: function onChange() {
      return _onChange2(value);
    },
    value: value
  })));
};

var RadioGroup = function RadioGroup(_ref5) {
  var items = _ref5.items,
      label = _ref5.label,
      name = _ref5.name,
      _ref5$onChange = _ref5.onChange,
      _onChange3 = _ref5$onChange === void 0 ? function () {} : _ref5$onChange,
      spritemap = _ref5.spritemap;

  var _React$useState3 = _react.default.useState(''),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      value = _React$useState4[0],
      setValue = _React$useState4[1];

  var params = {
    checked: value,
    name: name,
    onChange: function onChange(value) {
      _onChange3(value);

      setValue(value);
    }
  };
  "production" !== "production" ? (0, _warning.default)(items && items.filter(function (item) {
    return item.type !== 'radio';
  }).length === 0, 'ClayDropDownWithItems -> Items of type `radiogroup` should be used `radio` if you need to use others, it is recommended to use type `group`.') : void 0;
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, label && /*#__PURE__*/_react.default.createElement(_Group.default, {
    header: label
  }), items && /*#__PURE__*/_react.default.createElement("li", {
    "aria-label": label,
    role: "radiogroup"
  }, /*#__PURE__*/_react.default.createElement(RadioGroupContext.Provider, {
    value: params
  }, /*#__PURE__*/_react.default.createElement(DropDownContent, {
    items: items,
    spritemap: spritemap
  }))));
};

var DividerWithItem = function DividerWithItem() {
  return /*#__PURE__*/_react.default.createElement(_Divider.default, null);
};

var TYPE_MAP = {
  checkbox: Checkbox,
  divider: DividerWithItem,
  group: Group,
  item: Item,
  radio: Radio,
  radiogroup: RadioGroup
};

var DropDownContent = function DropDownContent(_ref6) {
  var items = _ref6.items,
      spritemap = _ref6.spritemap;
  return /*#__PURE__*/_react.default.createElement(_DropDown.default.ItemList, null, items.map(function (_ref7, key) {
    var type = _ref7.type,
        item = _objectWithoutProperties(_ref7, ["type"]);

    var Item = TYPE_MAP[type || 'item'];
    return /*#__PURE__*/_react.default.createElement(Item, _extends({}, item, {
      key: key,
      spritemap: spritemap
    }));
  }));
};

var findNested = function findNested(items, key) {
  return items.find(function (item) {
    if (item[key]) {
      return true;
    }

    if (item.items) {
      return findNested(item.items, key);
    }

    return false;
  });
};

var ClayDropDownWithItems = function ClayDropDownWithItems(_ref8) {
  var alignmentPosition = _ref8.alignmentPosition,
      caption = _ref8.caption,
      className = _ref8.className,
      containerElement = _ref8.containerElement,
      footerContent = _ref8.footerContent,
      helpText = _ref8.helpText,
      items = _ref8.items,
      menuElementAttrs = _ref8.menuElementAttrs,
      offsetFn = _ref8.offsetFn,
      _ref8$onSearchValueCh = _ref8.onSearchValueChange,
      onSearchValueChange = _ref8$onSearchValueCh === void 0 ? function () {} : _ref8$onSearchValueCh,
      searchable = _ref8.searchable,
      searchProps = _ref8.searchProps,
      _ref8$searchValue = _ref8.searchValue,
      searchValue = _ref8$searchValue === void 0 ? '' : _ref8$searchValue,
      spritemap = _ref8.spritemap,
      trigger = _ref8.trigger;

  var _React$useState5 = _react.default.useState(false),
      _React$useState6 = _slicedToArray(_React$useState5, 2),
      active = _React$useState6[0],
      setActive = _React$useState6[1];

  var hasRightSymbols = _react.default.useMemo(function () {
    return !!findNested(items, 'symbolRight');
  }, [items]);

  var hasLeftSymbols = _react.default.useMemo(function () {
    return !!findNested(items, 'symbolLeft');
  }, [items]);

  var Wrap = footerContent ? 'form' : _react.default.Fragment;
  return /*#__PURE__*/_react.default.createElement(_DropDown.default, {
    active: active,
    alignmentPosition: alignmentPosition,
    className: className,
    containerElement: containerElement,
    hasLeftSymbols: hasLeftSymbols,
    hasRightSymbols: hasRightSymbols,
    menuElementAttrs: menuElementAttrs,
    offsetFn: offsetFn,
    onActiveChange: setActive,
    trigger: trigger
  }, /*#__PURE__*/_react.default.createElement(ClayDropDownContext.Provider, {
    value: {
      close: function close() {
        return setActive(false);
      }
    }
  }, helpText && /*#__PURE__*/_react.default.createElement(_Help.default, null, helpText), searchable && /*#__PURE__*/_react.default.createElement(_Search.default, _extends({}, searchProps, {
    onChange: function onChange(event) {
      return onSearchValueChange(event.target.value);
    },
    spritemap: spritemap,
    value: searchValue
  })), /*#__PURE__*/_react.default.createElement(Wrap, null, footerContent ? /*#__PURE__*/_react.default.createElement("div", {
    className: "inline-scroller"
  }, /*#__PURE__*/_react.default.createElement(DropDownContent, {
    items: items,
    spritemap: spritemap
  })) : /*#__PURE__*/_react.default.createElement(DropDownContent, {
    items: items,
    spritemap: spritemap
  }), caption && /*#__PURE__*/_react.default.createElement(_Caption.default, null, caption), footerContent && /*#__PURE__*/_react.default.createElement("div", {
    className: "dropdown-section"
  }, footerContent))));
};

exports.ClayDropDownWithItems = ClayDropDownWithItems;