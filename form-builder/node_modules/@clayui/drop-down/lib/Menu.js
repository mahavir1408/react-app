"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Align = void 0;

var _shared = require("@clayui/shared");

var _classnames = _interopRequireDefault(require("classnames"));

var _domAlign = _interopRequireDefault(require("dom-align"));

var _react = _interopRequireDefault(require("react"));

var _hooks = require("./hooks");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Align = {
  BottomCenter: 4,
  BottomLeft: 5,
  BottomRight: 3,
  LeftBottom: 11,
  LeftCenter: 6,
  LeftTop: 10,
  RightBottom: 9,
  RightCenter: 2,
  RightTop: 8,
  TopCenter: 0,
  TopLeft: 7,
  TopRight: 1
};
exports.Align = Align;
var ALIGN_INVERSE = {
  0: 'TopCenter',
  1: 'TopRight',
  2: 'RightCenter',
  3: 'BottomRight',
  4: 'BottomCenter',
  5: 'BottomLeft',
  6: 'LeftCenter',
  7: 'TopLeft',
  8: 'RightTop',
  9: 'RightBottom',
  10: 'LeftTop',
  11: 'LeftBottom'
};
var ALIGN_MAP = {
  BottomCenter: ['tc', 'bc'],
  BottomLeft: ['tl', 'bl'],
  BottomRight: ['tr', 'br'],
  LeftBottom: ['br', 'bl'],
  LeftCenter: ['cr', 'cl'],
  LeftTop: ['tr', 'tl'],
  RightBottom: ['bl', 'br'],
  RightCenter: ['cl', 'cr'],
  RightTop: ['tl', 'tr'],
  TopCenter: ['bc', 'tc'],
  TopLeft: ['bl', 'tl'],
  TopRight: ['br', 'tr']
};

/**
 * For backwards compatability, we are creating a util here so that `metal-position`
 * number values are used in the same manner and result in the same alignment direction.
 */
var getAlignPoints = function getAlignPoints(val) {
  return ALIGN_MAP[ALIGN_INVERSE[val]];
};

var BOTTOM_OFFSET = [0, 4];
var LEFT_OFFSET = [-4, 0];
var RIGHT_OFFSET = [4, 0];
var TOP_OFFSET = [0, -4];
var OFFSET_MAP = {
  bctc: TOP_OFFSET,
  blbr: RIGHT_OFFSET,
  bltl: TOP_OFFSET,
  brbl: LEFT_OFFSET,
  brtr: TOP_OFFSET,
  clcr: RIGHT_OFFSET,
  crcl: LEFT_OFFSET,
  tcbc: BOTTOM_OFFSET,
  tlbl: BOTTOM_OFFSET,
  tltr: RIGHT_OFFSET,
  trbr: BOTTOM_OFFSET,
  trtl: LEFT_OFFSET
};

var ClayDropDownMenu = /*#__PURE__*/_react.default.forwardRef(function (_ref, // TS + refs don't always play nicely together, which is why it is casted
// in so many places below.
// See https://github.com/microsoft/TypeScript/issues/30748#issuecomment-480197036
ref) {
  var active = _ref.active,
      alignElementRef = _ref.alignElementRef,
      _ref$alignmentPositio = _ref.alignmentPosition,
      alignmentPosition = _ref$alignmentPositio === void 0 ? Align.BottomLeft : _ref$alignmentPositio,
      _ref$autoBestAlign = _ref.autoBestAlign,
      autoBestAlign = _ref$autoBestAlign === void 0 ? true : _ref$autoBestAlign,
      children = _ref.children,
      className = _ref.className,
      hasLeftSymbols = _ref.hasLeftSymbols,
      hasRightSymbols = _ref.hasRightSymbols,
      focusRefOnEsc = _ref.focusRefOnEsc,
      _ref$offsetFn = _ref.offsetFn,
      offsetFn = _ref$offsetFn === void 0 ? function (points) {
    return OFFSET_MAP[points.join('')];
  } : _ref$offsetFn,
      onSetActive = _ref.onSetActive,
      otherProps = _objectWithoutProperties(_ref, ["active", "alignElementRef", "alignmentPosition", "autoBestAlign", "children", "className", "hasLeftSymbols", "hasRightSymbols", "focusRefOnEsc", "offsetFn", "onSetActive"]);

  var subPortalRef = _react.default.useRef(null);

  (0, _hooks.useDropdownCloseInteractions)([alignElementRef, subPortalRef], onSetActive, focusRefOnEsc);

  _react.default.useLayoutEffect(function () {
    if (alignElementRef.current && ref.current && active) {
      var _points = alignmentPosition;

      if (typeof _points === 'number') {
        _points = getAlignPoints(_points);
      }

      (0, _domAlign.default)(ref.current, alignElementRef.current, {
        offset: offsetFn(_points),
        overflow: {
          adjustX: autoBestAlign,
          adjustY: autoBestAlign
        },
        points: _points
      });
    }
  }, [active]);

  return /*#__PURE__*/_react.default.createElement(_shared.ClayPortal, {
    subPortalRef: subPortalRef
  }, /*#__PURE__*/_react.default.createElement("div", {
    ref: subPortalRef
  }, /*#__PURE__*/_react.default.createElement("div", _extends({}, otherProps, {
    className: (0, _classnames.default)('dropdown-menu', className, {
      'dropdown-menu-indicator-end': hasRightSymbols,
      'dropdown-menu-indicator-start': hasLeftSymbols,
      show: active
    }),
    ref: ref
  }), children)));
});

var _default = ClayDropDownMenu;
exports.default = _default;