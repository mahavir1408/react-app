import React from 'react';
import ClayDropDown from './DropDown';
import ClayMenu from './Menu';
import Search from './Search';
declare type TType = 'checkbox' | 'group' | 'item' | 'radio' | 'radiogroup' | 'divider';
interface IItem {
    active?: boolean;
    checked?: boolean;
    disabled?: boolean;
    href?: string;
    items?: Array<IItem>;
    label?: string;
    name?: string;
    onChange?: Function;
    onClick?: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;
    symbolLeft?: string;
    symbolRight?: string;
    type?: TType;
    value?: string;
}
interface IDropDownContentProps {
    spritemap?: string;
    items: Array<IItem>;
}
export interface IProps extends IDropDownContentProps {
    alignmentPosition?: React.ComponentProps<typeof ClayMenu>['alignmentPosition'];
    caption?: string;
    className?: string;
    containerElement?: React.ComponentProps<typeof ClayDropDown>['containerElement'];
    footerContent?: React.ReactElement;
    trigger: React.ReactElement;
    helpText?: string;
    menuElementAttrs?: React.ComponentProps<typeof ClayDropDown>['menuElementAttrs'];
    offsetFn?: React.ComponentProps<typeof ClayDropDown>['offsetFn'];
    onSearchValueChange?: (newValue: string) => void;
    searchable?: boolean;
    searchProps?: Omit<React.ComponentProps<typeof Search>, 'onChange' | 'spritemap' | 'value'>;
    searchValue?: string;
}
export declare const ClayDropDownWithItems: React.FunctionComponent<IProps>;
export {};
