"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _button = _interopRequireDefault(require("@clayui/button"));

var _form = require("@clayui/form");

var _icon = _interopRequireDefault(require("@clayui/icon"));

var _shared = require("@clayui/shared");

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var TimeType;

(function (TimeType) {
  TimeType["minutes"] = "minutes";
  TimeType["hours"] = "hours";
  TimeType["ampm"] = "ampm";
})(TimeType || (TimeType = {}));

var DEFAULT_VALUE = '--';
var DEFAULT_CONFIG = {
  use12Hours: {
    ampm: {
      am: 'AM',
      pm: 'PM'
    },
    hours: {
      max: 11,
      min: 0
    },
    minutes: {
      max: 59,
      min: 0
    }
  },
  use24Hours: {
    ampm: {
      am: 'AM',
      pm: 'PM'
    },
    hours: {
      max: 23,
      min: 0
    },
    minutes: {
      max: 59,
      min: 0
    }
  }
};

var ClayTimePicker = function ClayTimePicker(_ref) {
  var _ref$ariaLabels = _ref.ariaLabels,
      ariaLabels = _ref$ariaLabels === void 0 ? {
    ampm: 'Select time of day (AM/PM) using up (PM) and down (AM) arrow keys',
    clear: 'Delete the entered time',
    hours: 'Enter the hour in 00:00 format',
    minutes: 'Enter the minutes in 00:00 format',
    timeDown: 'Time down',
    timeUp: 'Time up'
  } : _ref$ariaLabels,
      _ref$config = _ref.config,
      config = _ref$config === void 0 ? DEFAULT_CONFIG : _ref$config,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      _ref$icon = _ref.icon,
      icon = _ref$icon === void 0 ? false : _ref$icon,
      name = _ref.name,
      spritemap = _ref.spritemap,
      timezone = _ref.timezone,
      _ref$use12Hours = _ref.use12Hours,
      use12Hours = _ref$use12Hours === void 0 ? false : _ref$use12Hours,
      _ref$values = _ref.values,
      values = _ref$values === void 0 ? {
    hours: DEFAULT_VALUE,
    minutes: DEFAULT_VALUE
  } : _ref$values,
      _ref$onInputChange = _ref.onInputChange,
      onInputChange = _ref$onInputChange === void 0 ? function () {} : _ref$onInputChange;
  var useConfig = config[use12Hours ? 'use12Hours' : 'use24Hours'];

  var _React$useState = _react.default.useState(false),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      actionVisible = _React$useState2[0],
      setActionVisible = _React$useState2[1];

  var _React$useState3 = _react.default.useState(false),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      isFocused = _React$useState4[0],
      setIsFocused = _React$useState4[1];

  var elementRef = _react.default.useRef(null);

  var defaultFocused = {
    configName: TimeType.hours,
    focused: false
  };

  var _React$useState5 = _react.default.useState(defaultFocused),
      _React$useState6 = _slicedToArray(_React$useState5, 2),
      currentInputFocused = _React$useState6[0],
      setCurrentInputFocused = _React$useState6[1];

  var regex = /^\d+$/;

  var handleMaxAndMin = function handleMaxAndMin(value, config) {
    var newValue = value.substring(value.length - 2, value.length);
    var intrinsicValue = Number(newValue);

    if (intrinsicValue > config.max) {
      return String(config.min);
    } else if (intrinsicValue < config.min) {
      return String(config.max);
    }

    return newValue;
  };

  var handleKeyDown = function handleKeyDown(event, value, configName) {
    var config = useConfig[configName];
    var intrinsicValue = Number(value);

    var setValue = function setValue(newValue) {
      return onInputChange(_objectSpread(_objectSpread({}, values), {}, _defineProperty({}, configName, configName === TimeType.ampm ? newValue : handleMaxAndMin(String(newValue), config))));
    };

    switch (event.key) {
      case 'Backspace':
        setValue(DEFAULT_VALUE);
        break;

      case 'ArrowUp':
        event.preventDefault();

        if (configName === TimeType.ampm) {
          setValue(config.pm);
        } else {
          setValue(value !== DEFAULT_VALUE ? intrinsicValue + 1 : config.min);
        }

        break;

      case 'ArrowDown':
        event.preventDefault();

        if (configName === TimeType.ampm) {
          setValue(config.am);
        } else {
          setValue(value !== DEFAULT_VALUE ? intrinsicValue - 1 : config.max);
        }

        break;

      default:
        if (regex.test(event.key) && configName !== TimeType.ampm) {
          setValue((value && value !== DEFAULT_VALUE ? value : '') + event.key);
        }

        break;
    }
  };

  var handleAction = function handleAction(direction) {
    var configName = currentInputFocused.configName;
    var config = useConfig[configName];
    var prevValue = values[configName];
    var value;

    if (configName === TimeType.ampm) {
      value = direction === 1 ? config.pm : config.am;
    } else {
      value = handleMaxAndMin(String(prevValue !== DEFAULT_VALUE ? Number(prevValue) + direction : direction === -1 ? config.max : 0), config);
    }

    setCurrentInputFocused({
      configName: configName,
      focused: true
    });
    onInputChange(_objectSpread(_objectSpread({}, values), {}, _defineProperty({}, configName, value)));
  };

  var handleDocumentClick = function handleDocumentClick(event) {
    if (elementRef.current && event.target !== null && !elementRef.current.contains(event.target)) {
      setActionVisible(false);
      setCurrentInputFocused(defaultFocused);
      setIsFocused(false);
    }
  };

  var handleInputFocus = function handleInputFocus(configName) {
    setActionVisible(true);
    setCurrentInputFocused({
      configName: configName,
      focused: true
    });
    setIsFocused(true);
  };

  _react.default.useEffect(function () {
    document.addEventListener('click', handleDocumentClick);
    return function () {
      document.removeEventListener('click', handleDocumentClick);
    };
  }, []);

  var visibleActionReset = actionVisible && (values.ampm !== DEFAULT_VALUE && values.ampm != null || values.hours !== DEFAULT_VALUE || values.minutes !== DEFAULT_VALUE);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "clay-time"
  }, /*#__PURE__*/_react.default.createElement(_form.ClayInput.Group, null, icon && /*#__PURE__*/_react.default.createElement(_form.ClayInput.GroupItem, {
    shrink: true
  }, /*#__PURE__*/_react.default.createElement(_form.ClayInput.GroupText, null, /*#__PURE__*/_react.default.createElement(_icon.default, {
    spritemap: spritemap,
    symbol: "time"
  }))), /*#__PURE__*/_react.default.createElement(_shared.FocusScope, {
    arrowKeysLeftRight: true,
    arrowKeysUpDown: false
  }, /*#__PURE__*/_react.default.createElement(_form.ClayInput.GroupItem, {
    shrink: true
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('form-control', {
      disabled: disabled,
      focus: isFocused
    }),
    onMouseEnter: function onMouseEnter() {
      if (!disabled) {
        setActionVisible(true);
      }
    },
    onMouseLeave: function onMouseLeave() {
      if (!currentInputFocused.focused && !disabled) {
        setActionVisible(false);
      }
    },
    ref: elementRef
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "clay-time-edit"
  }, /*#__PURE__*/_react.default.createElement("input", {
    "aria-label": ariaLabels.hours,
    className: (0, _classnames.default)('clay-time-hours form-control-inset', {
      focus: currentInputFocused.configName === TimeType.hours && currentInputFocused.focused
    }),
    disabled: disabled,
    maxLength: 2,
    onFocus: function onFocus() {
      return handleInputFocus(TimeType.hours);
    },
    onKeyDown: function onKeyDown(event) {
      return handleKeyDown(event, values.hours, TimeType.hours);
    },
    readOnly: true,
    type: "text",
    value: values.hours
  }), /*#__PURE__*/_react.default.createElement("span", {
    className: "clay-time-divider"
  }, ':'), /*#__PURE__*/_react.default.createElement("input", {
    "aria-label": ariaLabels.minutes,
    className: (0, _classnames.default)('clay-time-minutes form-control-inset', {
      focus: currentInputFocused.configName === TimeType.minutes
    }),
    disabled: disabled,
    maxLength: 2,
    onFocus: function onFocus() {
      return handleInputFocus(TimeType.minutes);
    },
    onKeyDown: function onKeyDown(event) {
      return handleKeyDown(event, values.minutes, TimeType.minutes);
    },
    readOnly: true,
    type: "text",
    value: values.minutes
  }), use12Hours && /*#__PURE__*/_react.default.createElement("input", {
    "aria-label": ariaLabels.ampm,
    className: (0, _classnames.default)('clay-time-ampm form-control-inset', {
      focus: currentInputFocused.configName === TimeType.ampm
    }),
    disabled: disabled,
    "max-length": "2",
    onFocus: function onFocus() {
      return handleInputFocus(TimeType.ampm);
    },
    onKeyDown: function onKeyDown(event) {
      return handleKeyDown(event, values.ampm, TimeType.ampm);
    },
    readOnly: true,
    type: "text",
    value: values.ampm || DEFAULT_VALUE
  }), name && /*#__PURE__*/_react.default.createElement("input", {
    name: name,
    type: "hidden",
    value: "".concat(values.hours, ":").concat(values.minutes)
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "clay-time-action-group"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "clay-time-action-group-item",
    style: {
      opacity: visibleActionReset ? 1 : 0,
      pointerEvents: visibleActionReset ? 'auto' : 'none'
    }
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    "aria-label": ariaLabels.clear,
    className: "clay-time-clear-btn",
    disabled: disabled,
    displayType: "unstyled",
    onClick: function onClick() {
      return onInputChange(use12Hours ? {
        ampm: DEFAULT_VALUE,
        hours: DEFAULT_VALUE,
        minutes: DEFAULT_VALUE
      } : {
        hours: DEFAULT_VALUE,
        minutes: DEFAULT_VALUE
      });
    }
  }, /*#__PURE__*/_react.default.createElement(_icon.default, {
    spritemap: spritemap,
    symbol: "times-circle"
  }))), /*#__PURE__*/_react.default.createElement("div", {
    className: "clay-time-action-group-item",
    style: {
      opacity: actionVisible ? 1 : 0
    }
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "btn-group-vertical clay-time-inner-spin",
    role: "group"
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    "aria-label": ariaLabels.timeUp,
    className: "clay-time-inner-spin-btn clay-time-inner-spin-btn-inc",
    disabled: disabled,
    displayType: "secondary",
    onClick: function onClick() {
      return handleAction(1);
    }
  }, /*#__PURE__*/_react.default.createElement(_icon.default, {
    spritemap: spritemap,
    symbol: "angle-up"
  })), /*#__PURE__*/_react.default.createElement(_button.default, {
    "aria-label": ariaLabels.timeDown,
    className: "clay-time-inner-spin-btn clay-time-inner-spin-btn-dec",
    disabled: disabled,
    displayType: "secondary",
    onClick: function onClick() {
      return handleAction(-1);
    }
  }, /*#__PURE__*/_react.default.createElement(_icon.default, {
    spritemap: spritemap,
    symbol: "angle-down"
  })))))))), timezone && /*#__PURE__*/_react.default.createElement(_form.ClayInput.GroupItem, {
    shrink: true
  }, /*#__PURE__*/_react.default.createElement(_form.ClayInput.GroupText, null, "(".concat(timezone, ")")))));
};

var _default = ClayTimePicker;
exports.default = _default;