"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clone = clone;
exports.getDaysInMonth = getDaysInMonth;
exports.getWeekArray = getWeekArray;
exports.range = range;
exports.addMonths = addMonths;
exports.setDate = setDate;
exports.isValid = isValid;
Object.defineProperty(exports, "formatDate", {
  enumerable: true,
  get: function get() {
    return _format.default;
  }
});
Object.defineProperty(exports, "parseDate", {
  enumerable: true,
  get: function get() {
    return _parse.default;
  }
});

var _format = _interopRequireDefault(require("date-fns/format"));

var _parse = _interopRequireDefault(require("date-fns/parse"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * SPDX-FileCopyrightText: Â© 2019 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: BSD-3-Clause
 */

/**
 * Clone a date object.
 */
function clone(date) {
  return new Date(date instanceof Date ? date.getTime() : date);
}

function getDaysInMonth(d) {
  var firstDayOfMonth = new Date(d.getFullYear(), d.getMonth(), 1, 12);
  firstDayOfMonth.setMonth(firstDayOfMonth.getMonth() + 1);
  firstDayOfMonth.setDate(firstDayOfMonth.getDate() - 1);
  return firstDayOfMonth.getDate();
}
/**
 * Utility function to generate a table two days of the month.
 * Based on (This implementation does not have the fixation of
 * 6 weeks) https://github.com/gpbl/react-day-picker/blob/master/src/Helpers.js#L55
 *
 * @example
 * getWeekArray(new Date(), 0);
 *
 * [
 *   [
 *     {
 *       date: Sun Dec 30 2018 12:00:00 GMT-0300...
 *       outside: true
 * 	   },
 *     ...
 *   ]
 *   ...
 * ]
 *
 * The `outside` property references when a day
 * does not belong to the current month.
 */


function getWeekArray(d) {
  var firstDayOfWeek = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var daysInMonth = getDaysInMonth(d);
  var dayArray = [];
  var week = [];
  var weekArray = [];

  for (var i = 1; i <= daysInMonth; i += 1) {
    var genDay = new Date(d.getFullYear(), d.getMonth(), i, 12);
    dayArray.push({
      date: genDay
    });
  }

  dayArray.forEach(function (day) {
    if (week.length > 0 && day.date.getDay() === firstDayOfWeek) {
      weekArray.push(week);
      week = [];
    }

    week.push(day);

    if (dayArray.indexOf(day) === dayArray.length - 1) {
      weekArray.push(week);
    }
  }); // unshift days from start of the first week

  var firstWeek = weekArray[0];

  for (var _i = 7 - firstWeek.length; _i > 0; _i -= 1) {
    var outsideDate = clone(firstWeek[0].date);
    outsideDate.setDate(firstWeek[0].date.getDate() - 1);
    firstWeek.unshift({
      date: outsideDate,
      outside: true
    });
  } // push days until the end of the last week


  var lastWeek = weekArray[weekArray.length - 1];

  for (var _i2 = lastWeek.length; _i2 < 7; _i2 += 1) {
    var _outsideDate = clone(lastWeek[lastWeek.length - 1].date);

    _outsideDate.setDate(lastWeek[lastWeek.length - 1].date.getDate() + 1);

    lastWeek.push({
      date: _outsideDate,
      outside: true
    });
  }

  return weekArray;
}

function range(_ref) {
  var end = _ref.end,
      start = _ref.start;
  return Array.from({
    length: end - start + 1
  }, function (v, k) {
    return k + start;
  });
}

function addMonths(date, months) {
  date = clone(date);
  date.setMonth(date.getMonth() + months);
  return date;
}

function setDate(date, obj) {
  date = clone(date);
  return Object.keys(obj).reduce(function (acc, key) {
    var method = "set".concat(key.charAt(0).toUpperCase() + key.slice(1)); // @ts-ignore

    acc[method](obj[key]);
    return acc;
  }, date);
}

function isValid(date) {
  return date instanceof Date && !isNaN(date.getTime());
}