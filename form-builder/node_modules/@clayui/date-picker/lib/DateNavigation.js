"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _button = _interopRequireDefault(require("@clayui/button"));

var _icon = _interopRequireDefault(require("@clayui/icon"));

var _react = _interopRequireDefault(require("react"));

var _Helpers = require("./Helpers");

var _Select = _interopRequireDefault(require("./Select"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * SPDX-FileCopyrightText: Â© 2019 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: BSD-3-Clause
 */
var ClayDatePickerDateNavigation = function ClayDatePickerDateNavigation(_ref) {
  var ariaLabels = _ref.ariaLabels,
      currentMonth = _ref.currentMonth,
      disabled = _ref.disabled,
      months = _ref.months,
      onDotClicked = _ref.onDotClicked,
      onMonthChange = _ref.onMonthChange,
      spritemap = _ref.spritemap,
      years = _ref.years;

  var memoizedYears = _react.default.useMemo(function () {
    return (0, _Helpers.range)(years).map(function (elem) {
      return {
        label: elem,
        value: elem
      };
    });
  }, [years]);

  var memoizedMonths = _react.default.useMemo(function () {
    return months.map(function (month, index) {
      return {
        label: month,
        value: index
      };
    });
  }, [months]);

  var monthSelectorRef = _react.default.useRef(null);

  var yearSelectorRef = _react.default.useRef(null);
  /**
   * Handles the change of the month from the available
   * years in the range
   */


  function handleChangeMonth(month) {
    var date = (0, _Helpers.addMonths)(currentMonth, month);
    var year = date.getFullYear();

    if (memoizedYears.find(function (elem) {
      return elem.value === year;
    })) {
      onMonthChange(date);
    }
  }
  /**
   * Handles the previous month button
   */


  var handlePreviousMonthClicked = function handlePreviousMonthClicked() {
    return handleChangeMonth(-1);
  };
  /**
   * Handles the next month button
   */


  var handleNextMonthClicked = function handleNextMonthClicked() {
    return handleChangeMonth(1);
  };
  /**
   * Handles the change of the year and month of the header
   */


  function handleFormChange() {
    if (monthSelectorRef.current && yearSelectorRef.current) {
      var year = Number(yearSelectorRef.current.value);
      var month = Number(monthSelectorRef.current.value);
      onMonthChange(new Date(year, month));
    }
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "date-picker-calendar-header"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "date-picker-nav"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "date-picker-nav-item input-date-picker-month"
  }, /*#__PURE__*/_react.default.createElement(_Select.default, {
    disabled: disabled,
    name: "month",
    onChange: handleFormChange,
    options: memoizedMonths,
    ref: monthSelectorRef,
    testId: "month-select",
    value: currentMonth.getMonth()
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "date-picker-nav-item input-date-picker-year"
  }, /*#__PURE__*/_react.default.createElement(_Select.default, {
    disabled: disabled,
    name: "year",
    onChange: handleFormChange,
    options: memoizedYears,
    ref: yearSelectorRef,
    testId: "year-select",
    value: currentMonth.getFullYear()
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "date-picker-nav-controls date-picker-nav-item date-picker-nav-item-expand"
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    "aria-label": ariaLabels.buttonPreviousMonth,
    disabled: disabled,
    displayType: "unstyled",
    monospaced: true,
    onClick: handlePreviousMonthClicked,
    small: true
  }, /*#__PURE__*/_react.default.createElement(_icon.default, {
    spritemap: spritemap,
    symbol: "angle-left"
  })), /*#__PURE__*/_react.default.createElement(_button.default, {
    "aria-label": ariaLabels.buttonDot,
    disabled: disabled,
    displayType: "unstyled",
    monospaced: true,
    onClick: onDotClicked,
    small: true
  }, /*#__PURE__*/_react.default.createElement(_icon.default, {
    spritemap: spritemap,
    symbol: "simple-circle"
  })), /*#__PURE__*/_react.default.createElement(_button.default, {
    "aria-label": ariaLabels.buttonNextMonth,
    disabled: disabled,
    displayType: "unstyled",
    monospaced: true,
    onClick: handleNextMonthClicked,
    small: true
  }, /*#__PURE__*/_react.default.createElement(_icon.default, {
    spritemap: spritemap,
    symbol: "angle-right"
  })))));
};

var _default = ClayDatePickerDateNavigation;
exports.default = _default;