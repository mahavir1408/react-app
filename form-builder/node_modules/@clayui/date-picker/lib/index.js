"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "FirstDayOfWeek", {
  enumerable: true,
  get: function get() {
    return _types.FirstDayOfWeek;
  }
});
exports.default = void 0;

var _button = _interopRequireDefault(require("@clayui/button"));

var _dropDown = _interopRequireDefault(require("@clayui/drop-down"));

var _form = require("@clayui/form");

var _icon = _interopRequireDefault(require("@clayui/icon"));

var _shared = require("@clayui/shared");

var _react = _interopRequireDefault(require("react"));

var _DateNavigation = _interopRequireDefault(require("./DateNavigation"));

var _DayNumber = _interopRequireDefault(require("./DayNumber"));

var _DaysTable = _interopRequireDefault(require("./DaysTable"));

var _Helpers = require("./Helpers");

var _Hooks = require("./Hooks");

var _InputDate = _interopRequireDefault(require("./InputDate"));

var _TimePicker = _interopRequireDefault(require("./TimePicker"));

var _Weekday = _interopRequireDefault(require("./Weekday"));

var _WeekdayHeader = _interopRequireDefault(require("./WeekdayHeader"));

var _types = require("./types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var dateNow = new Date();
var TIME_FORMAT = 'H:m';
/**
 * ClayDatePicker component.
 */

var ClayDatePicker = /*#__PURE__*/_react.default.forwardRef(function (_ref, ref) {
  var _ref$ariaLabels = _ref.ariaLabels,
      ariaLabels = _ref$ariaLabels === void 0 ? {
    buttonDot: 'Select current date',
    buttonNextMonth: 'Select the next month',
    buttonPreviousMonth: 'Select the previous month'
  } : _ref$ariaLabels,
      _ref$dateFormat = _ref.dateFormat,
      dateFormat = _ref$dateFormat === void 0 ? 'yyyy-MM-dd' : _ref$dateFormat,
      disabled = _ref.disabled,
      expanded = _ref.expanded,
      _ref$firstDayOfWeek = _ref.firstDayOfWeek,
      firstDayOfWeek = _ref$firstDayOfWeek === void 0 ? _types.FirstDayOfWeek.Sunday : _ref$firstDayOfWeek,
      footerElement = _ref.footerElement,
      id = _ref.id,
      _ref$initialExpanded = _ref.initialExpanded,
      initialExpanded = _ref$initialExpanded === void 0 ? false : _ref$initialExpanded,
      _ref$initialMonth = _ref.initialMonth,
      initialMonth = _ref$initialMonth === void 0 ? new Date() : _ref$initialMonth,
      inputName = _ref.inputName,
      _ref$months = _ref.months,
      months = _ref$months === void 0 ? ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'] : _ref$months,
      onExpandedChange = _ref.onExpandedChange,
      _ref$onNavigation = _ref.onNavigation,
      onNavigation = _ref$onNavigation === void 0 ? function () {} : _ref$onNavigation,
      _ref$onValueChange = _ref.onValueChange,
      onValueChange = _ref$onValueChange === void 0 ? function () {} : _ref$onValueChange,
      placeholder = _ref.placeholder,
      spritemap = _ref.spritemap,
      _ref$time = _ref.time,
      time = _ref$time === void 0 ? false : _ref$time,
      timezone = _ref.timezone,
      _ref$useNative = _ref.useNative,
      useNative = _ref$useNative === void 0 ? false : _ref$useNative,
      value = _ref.value,
      _ref$weekdaysShort = _ref.weekdaysShort,
      weekdaysShort = _ref$weekdaysShort === void 0 ? ['S', 'M', 'T', 'W', 'T', 'F', 'S'] : _ref$weekdaysShort,
      _ref$years = _ref.years,
      years = _ref$years === void 0 ? {
    end: dateNow.getFullYear(),
    start: dateNow.getFullYear()
  } : _ref$years,
      otherProps = _objectWithoutProperties(_ref, ["ariaLabels", "dateFormat", "disabled", "expanded", "firstDayOfWeek", "footerElement", "id", "initialExpanded", "initialMonth", "inputName", "months", "onExpandedChange", "onNavigation", "onValueChange", "placeholder", "spritemap", "time", "timezone", "useNative", "value", "weekdaysShort", "years"]);

  /**
   * Normalize date for always set noon to avoid time zone issues
   */
  var normalizeDate = function normalizeDate(date) {
    return (0, _Helpers.setDate)(date, {
      date: 1,
      hours: 12,
      milliseconds: 1,
      minutes: 1,
      seconds: 1
    });
  };
  /**
   * Indicates the current month rendered on the screen.
   */


  var _React$useState = _react.default.useState(function () {
    return normalizeDate(initialMonth);
  }),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      currentMonth = _React$useState2[0],
      setCurrentMonth = _React$useState2[1];
  /**
   * Indicates the time selected by the user.
   */


  var _useCurrentTime = (0, _Hooks.useCurrentTime)(TIME_FORMAT),
      _useCurrentTime2 = _slicedToArray(_useCurrentTime, 2),
      currentTime = _useCurrentTime2[0],
      setCurrentTime = _useCurrentTime2[1];
  /**
   * The day selected by the user.
   */


  var _React$useState3 = _react.default.useState(initialMonth),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      daySelected = _React$useState4[0],
      setDaySelected = _React$useState4[1];
  /**
   * An array of the weeks and days list for the current month
   */


  var _useWeeks = (0, _Hooks.useWeeks)(currentMonth, firstDayOfWeek),
      _useWeeks2 = _slicedToArray(_useWeeks, 2),
      weeks = _useWeeks2[0],
      setWeeks = _useWeeks2[1];
  /**
   * Flag to indicate if date is expanded.
   */


  var _React$useState5 = _react.default.useState(initialExpanded),
      _React$useState6 = _slicedToArray(_React$useState5, 2),
      internalExpanded = _React$useState6[0],
      setInternalExpanded = _React$useState6[1];

  expanded = expanded !== undefined ? expanded : internalExpanded;
  var setExpanded = onExpandedChange ? onExpandedChange : setInternalExpanded;
  /**
   * Create a ref to store the datepicker DOM element
   */

  var dropdownContainerRef = _react.default.useRef(null);
  /**
   * Create a ref to store the datepicker DOM element
   */


  var triggerElementRef = _react.default.useRef(null);
  /**
   * Handles the change of the current month of the Date Picker
   * content and takes care of updating the weeks.
   */


  var changeMonth = function changeMonth(date) {
    var dateNormalized = normalizeDate(date);
    setCurrentMonth(dateNormalized);
    onNavigation(dateNormalized); // It is not necessary to update the weeks when the native
    // date is enabled. Unnecessary rendering and processing.

    if (!useNative) {
      setWeeks(dateNormalized);
    }
  };
  /**
   * Handles the click on element of the day
   */


  var handleDayClicked = function handleDayClicked(date) {
    setDaySelected(date);
    onValueChange(date, 'click');
  };
  /**
   * Control the value of the input propagating with the call
   * of `onValueChange` but does not change what the user types,
   * if a date is valid the month of the Date Picker is changed.
   */


  var inputChange = function inputChange(event) {
    var value = event.target.value;
    var format = time ? "".concat(dateFormat, " ").concat(TIME_FORMAT) : dateFormat;
    var date = (0, _Helpers.parseDate)(value, format, new Date());
    var year = date.getFullYear();

    if ((0, _Helpers.isValid)(date) && year >= years.start && years.end >= year) {
      changeMonth(date);
      setDaySelected(date);

      if (time) {
        setCurrentTime(date.getHours(), date.getMinutes());
      }
    }

    onValueChange(value, 'input');
  };
  /**
   * Changes selected date to the current date. The same happens when there
   * is no date selected.
   */


  var handleDotClicked = function handleDotClicked() {
    changeMonth(dateNow);
    setDaySelected(dateNow);
    onValueChange(dateNow);
  };

  var handleTimeChange = function handleTimeChange(hours, minutes) {
    var format = time ? "".concat(dateFormat, " ").concat(TIME_FORMAT) : dateFormat; // Hack to force InputDate to add `currentTime` to the value of
    // the input when the value was edited by the user.

    if (typeof value === 'string' && (0, _Helpers.isValid)((0, _Helpers.parseDate)(value, format, new Date()))) {
      onValueChange((0, _Helpers.parseDate)(value, format, new Date()), 'time');
    }

    setCurrentTime(hours, minutes);
  };
  /**
   * Handles datepicker view
   */


  var handleCalendarButtonClicked = function handleCalendarButtonClicked() {
    return setExpanded(!expanded);
  };
  /**
   * Handle with the focus when it's outside of the component
   * In this case, forces the state of expanded to be false
   */


  var handleFocus = function handleFocus(event) {
    if (dropdownContainerRef.current && !dropdownContainerRef.current.contains(event.target) && triggerElementRef.current && !triggerElementRef.current.contains(event.target)) {
      setExpanded(false);
    }
  };

  _react.default.useEffect(function () {
    document.addEventListener('focus', handleFocus, true);
    return function () {
      document.removeEventListener('focus', handleFocus, true);
    };
  }, [handleFocus]);

  return /*#__PURE__*/_react.default.createElement(_shared.FocusScope, {
    arrowKeysLeftRight: true
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "date-picker"
  }, /*#__PURE__*/_react.default.createElement(_form.ClayInput.Group, {
    id: id,
    ref: triggerElementRef
  }, /*#__PURE__*/_react.default.createElement(_form.ClayInput.GroupItem, null, /*#__PURE__*/_react.default.createElement(_InputDate.default, _extends({}, otherProps, {
    ariaLabel: ariaLabels.input,
    currentTime: currentTime,
    dateFormat: dateFormat,
    disabled: disabled,
    inputName: inputName,
    onChange: inputChange,
    placeholder: placeholder,
    ref: ref,
    time: time,
    useNative: useNative,
    value: value
  })), !useNative && /*#__PURE__*/_react.default.createElement(_form.ClayInput.GroupInsetItem, {
    after: true
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    className: "date-picker-dropdown-toggle",
    disabled: disabled,
    displayType: "unstyled",
    onClick: handleCalendarButtonClicked
  }, /*#__PURE__*/_react.default.createElement(_icon.default, {
    spritemap: spritemap,
    symbol: "calendar"
  }))))), !useNative && /*#__PURE__*/_react.default.createElement(_dropDown.default.Menu, {
    active: expanded,
    alignElementRef: triggerElementRef,
    className: "date-picker-dropdown-menu",
    onSetActive: setExpanded,
    ref: dropdownContainerRef
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "date-picker-calendar"
  }, /*#__PURE__*/_react.default.createElement(_DateNavigation.default, {
    ariaLabels: ariaLabels,
    currentMonth: currentMonth,
    disabled: disabled,
    months: months,
    onDotClicked: handleDotClicked,
    onMonthChange: changeMonth,
    spritemap: spritemap,
    years: years
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "date-picker-calendar-body"
  }, /*#__PURE__*/_react.default.createElement(_WeekdayHeader.default, {
    firstDayOfWeek: firstDayOfWeek,
    weekdaysShort: weekdaysShort
  }, function (_ref2) {
    var key = _ref2.key,
        weekday = _ref2.weekday;
    return /*#__PURE__*/_react.default.createElement(_Weekday.default, {
      key: key,
      weekday: weekday
    });
  }), /*#__PURE__*/_react.default.createElement(_DaysTable.default, {
    weeks: weeks
  }, function (_ref3) {
    var day = _ref3.day,
        key = _ref3.key;
    return /*#__PURE__*/_react.default.createElement(_DayNumber.default, {
      day: day,
      daySelected: daySelected,
      disabled: disabled,
      key: key,
      onClick: handleDayClicked
    });
  })), (footerElement || time) && /*#__PURE__*/_react.default.createElement("div", {
    className: "date-picker-calendar-footer"
  }, time && /*#__PURE__*/_react.default.createElement(_TimePicker.default, {
    currentTime: currentTime,
    disabled: disabled,
    onTimeChange: handleTimeChange,
    spritemap: spritemap,
    timezone: timezone
  }), !time && footerElement && _react.default.Children.only(footerElement({
    spritemap: spritemap
  })))))));
});

var _default = ClayDatePicker;
exports.default = _default;